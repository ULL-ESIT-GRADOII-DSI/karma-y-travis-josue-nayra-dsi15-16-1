var expect=chai.expect;describe("Medida",function(){var e=new Medida(45,"km"),o=new Medida("45km"),t=new Medida("77 m");describe("Construccion",function(){it("Se crean los objetos medida1, medida2, medida3",function(){expect(e).to.be.an("object"),expect(e).to.exist,expect(e).to.not.be["null"],expect(o).to.be.an("object"),expect(o).to.exist,expect(o).to.not.be["null"],expect(t).to.be.an("object"),expect(t).to.exist,expect(t).to.not.be["null"]}),it("Se construye medida pasandole al constructor: Valor y Tipo",function(){expect(e).to.not.be["null"],expect(e.valor).to.equal(45),expect(e.tipo).to.equal("km")}),it("Se construye medida pasandole al constructor: Valor",function(){expect(o.valor).to.not.be.empty,expect(o.tipo).to.not.be.empty,expect(o.valor).to.equal(45),expect(o.tipo).to.equal("km")}),it("Los objetos medida1, medida2 y medida3 son instancias de Medida",function(){expect(e).to.be.an["instanceof"](Medida),expect(o).to.be.an["instanceof"](Medida),expect(t).to.be.an["instanceof"](Medida)}),it("Los objetos medida1, medida2 y medida3 tienen los atributos: valor y tipo",function(){expect(e).to.have.property("valor"),expect(e).to.have.property("tipo")})}),describe("Comparando las medidas",function(){it("El valor y tipo de los objetos medida1 y medida2 son iguales",function(){expect(e.valor).to.be.equal(o.valor),expect(e.tipo).to.be.equal(o.tipo)}),it("El valor y tipo de los objetos medida3 y medida1 o medida2 son diferentes",function(){expect(t.valor).to.not.be.equal(e.valor),expect(t.valor).to.not.be.equal(o.valor),expect(t.tipo).to.not.be.equal(e.tipo),expect(t.tipo).to.not.be.equal(o.tipo)}),it("El valor del objeto medida3 es mayor que el valor del objeto medida1",function(){expect(e.valor).to.not.be.above(t.valor),expect(t.valor).to.be.above(o.valor)}),it("El valor del objeto medida1 es menor que el valor del objeto medida3",function(){expect(e.valor).to.be.below(t.valor)}),it("El valor de los objetos medida1, medida2 y medida3 esta dentro del rango 40-100",function(){expect(e.valor).to.be.within(40,100),expect(o.valor).to.be.within(40,100),expect(t.valor).to.be.within(40,100)}),it("El valor de los objetos medida1 y medida2 no esta dentro del rango 50-100",function(){expect(e.valor).to.not.be.within(50,100),expect(o.valor).to.not.be.within(50,100)})}),describe("Pruebas y casos",function(){it("Medida1, medida2 y medida3 hacen match con la regexp",function(){var n=e.valor+" "+e.tipo,i=o.valor+" "+o.tipo,a=t.valor+" "+t.tipo;expect(n).to.match(/^\s*([-+]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)\s*[a-z][a-z0-9]*$/i),expect(i).to.match(/^\s*([-+]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)\s*[a-z][a-z0-9]*$/i),expect(a).to.match(/^\s*([-+]?\d+(?:\.\d*)?(?:e[+-]?\d+)?)\s*[a-z][a-z0-9]*$/i)}),it("Creando objeto Medida con un solo parámetro",function(){var e=new Medida("50c");expect(e.valor).to.be.equal(50),expect(e.tipo).to.be.equal("c")}),it("Devolviendo desconozco como se puede... en función convertir",function(){var e="1p to z",o=Medida.match(e),t=o.tipo,n=o.to;console.log("Tipo->"+t),console.log("Destino->"+n),expect(Medida.convertir("1p to z")).to.be.equal("Desconozco como convertir desde "+t+" hasta "+n)}),it("Devolviendo Introduzca una temperatura...",function(){var e="1z";expect(Medida.convertir(e)).to.be.equal("Introduzca una temperatura valida: 330e-1 F to C")})})}),describe("Temperatura",function(){var e=new Temperatura(100,"C"),o=new Temperatura(200,"F"),t=new Temperatura(300,"K"),n=new Celsius(10),i=new Farenheit(20),a=new Kelvin(400);describe("Construccion",function(){it("Los objetos t1,t2 y t3 son instancias de la clase Temperatura y Medida",function(){expect(e).to.be.an["instanceof"](Medida),expect(e).to.be.an["instanceof"](Temperatura),expect(e).to.exist,expect(e).to.not.be["null"],expect(o).to.be.an["instanceof"](Medida),expect(o).to.be.an["instanceof"](Temperatura),expect(o).to.exist,expect(o).to.not.be["null"],expect(t).to.be.an["instanceof"](Medida),expect(t).to.be.an["instanceof"](Temperatura),expect(t).to.exist,expect(t).to.not.be["null"]}),it("Se crea un objeto de tipo Celsius",function(){expect(n).to.be.an["instanceof"](Medida),expect(n).to.be.an["instanceof"](Temperatura),expect(n).to.be.an["instanceof"](Celsius),expect(n).to.exist}),it("Para el objeto Celsius, existe un metodo toFarenheit y toKelvin",function(){expect(n).to.respondTo("toFarenheit"),expect(n).to.respondTo("toKelvin")}),it("Se crea un objeto de tipo Farenheit",function(){expect(i).to.be.an["instanceof"](Medida),expect(i).to.be.an["instanceof"](Temperatura),expect(i).to.be.an["instanceof"](Farenheit),expect(i).to.exist}),it("Para el objeto Farenheit, existe un metodo toCelsius y toKelvin",function(){expect(i).to.respondTo("toCelsius"),expect(i).to.respondTo("toKelvin")}),it("Se crea un objeto de tipo Kelvin",function(){expect(a).to.be.an["instanceof"](Medida),expect(a).to.be.an["instanceof"](Temperatura),expect(a).to.be.an["instanceof"](Kelvin),expect(a).to.exist}),it("Para un objeto Kelvin, existe un metodo toCelsius y toFarenheit",function(){expect(a).to.respondTo("toCelsius"),expect(a).to.respondTo("toFarenheit")})}),describe("Conversiones",function(){describe("Desde Celsius...",function(){it("10 C to F = 50 Farenheit",function(){expect(Medida.convertir("10C to F")).to.equal("50 Farenheit")}),it("10 C to K > 300.00 Kelvin",function(){expect(Medida.convertir("10 C to k")).to.be.above("200.00 Kelvin")}),it("10 C to K < 350.00 Kelvin",function(){expect(Medida.convertir("10 C to K")).to.be.below("300.00 Kelvin")})}),describe("Desde Farenheit...",function(){it("20 F to C = -6.666666666666667 Celsius",function(){expect(Medida.convertir("20 F to C")).to.equal("-6.666666666666667 Celsius")}),it("20 F to K > -10.00 Kelvin",function(){expect(Medida.convertir("20 F to k")).to.be.above("-10.00 Kelvin")}),it("20 F to K < 350.00 Kelvin",function(){expect(Medida.convertir("20 F to K")).to.be.below("350.00 Kelvin")})}),describe("Desde kelvin...",function(){it("400 K to C != 0 Celsius",function(){expect(Medida.convertir("400 K to C")).to.not.equal("0 Celsius")}),it("400 K to F > -100.00 Farenheit",function(){expect(Medida.convertir("400 K to F")).to.be.above("-100 Farenheit")}),it("400 K to F < 350.00 Farenheit",function(){expect(Medida.convertir("400 K to F")).to.be.below("350.00 Farenheit")})}),it("Si el destino es igual que la unidad de origen, se devuelve lo mismo como por ejemplo: 32 C to C = 32 c",function(){expect(Medida.convertir("32C to C")).to.be.equal("32 c"),expect(Medida.convertir("32F to F")).to.be.equal("32 f"),expect(Medida.convertir("32K to K")).to.be.equal("32 k")}),it("Conversiones con numeros con e: 1.2e1 F to K",function(){expect(Medida.convertir("1.2e1F to K")).to.be.equal("262.0388888888889 Kelvin")}),it("En la expresion puede ponerse el to o no: 1.2e1F K",function(){expect(Medida.convertir("1.2e1F K")).to.be.equal("262.0388888888889 Kelvin")}),it("En la expresion pueden ponerse espacios entre las unidades, al final y al principio: 1.2e1   F   to    K",function(){expect(Medida.convertir("   1.2e1   F   to    K     ")).to.be.equal("262.0388888888889 Kelvin")})})}),describe("Distancias",function(){var e=new Distancia(32,"km"),o=new Kilometro(79),t=new Metro(103),n=new Pulgada(72);describe("Construccion",function(){it("Se crean los objetos d1, d2, d3 y d4 de tipo Distancia, Kilometro , Milimetro y Pulgada, respectivamente",function(){expect(e).to.be.an["instanceof"](Distancia),expect(e).to.be.an["instanceof"](Medida),expect(o).to.be.an["instanceof"](Kilometro),expect(o).to.be.an["instanceof"](Distancia),expect(o).to.be.an["instanceof"](Medida),expect(t).to.be.an["instanceof"](Metro),expect(t).to.be.an["instanceof"](Distancia),expect(t).to.be.an["instanceof"](Medida),expect(n).to.be.an["instanceof"](Pulgada),expect(n).to.be.an["instanceof"](Distancia),expect(n).to.be.an["instanceof"](Medida)}),it("El objeto d1 no responde a los metodos toMetro, toKilometro, toPulgada",function(){expect(e).to.not.respondTo("toMetro"),expect(e).to.not.respondTo("toKilometro"),expect(e).to.not.respondTo("toPulgada")}),it("El objeto d2 responde a los metodos toMetro,toCentimetro,toMilimetro y toPulgada",function(){expect(o).to.respondTo("toMetro"),expect(o).to.respondTo("toCentimetro"),expect(o).to.respondTo("toMilimetro"),expect(o).to.respondTo("toPulgada")}),it("El objeto d3 responde a los metodos toKilometro, toCentimetro , toMilimetro y toPulgada",function(){expect(t).to.respondTo("toKilometro"),expect(t).to.respondTo("toCentimetro"),expect(t).to.respondTo("toMilimetro"),expect(t).to.respondTo("toPulgada")}),it("El objeto d4 responde a los metodos toKilometro, toCentimetro , toMilimetro y toMetro",function(){expect(n).to.respondTo("toKilometro"),expect(n).to.respondTo("toCentimetro"),expect(n).to.respondTo("toMilimetro"),expect(n).to.respondTo("toMetro")}),it("Los objetos de tipo Distancia no responden a los metodos de la clase Volumen o Temperatura",function(){expect(e).to.not.respondTo("toCelsius"),expect(e).to.not.respondTo("toFarenheit"),expect(e).to.not.respondTo("toKelvin"),expect(e).to.not.respondTo("toLitro"),expect(e).to.not.respondTo("toKilometro3"),expect(e).to.not.respondTo("toMetro3"),expect(e).to.not.respondTo("toCentimetro3"),expect(e).to.not.respondTo("toMilimetro3")})}),describe("Conversiones",function(){describe("Desde Kilometro...",function(){it("79 km to m = 79000 metros",function(){expect(o.toMetro().valor).to.be.equal(79e3)}),it("79 km to cm < 8000000 centimetros",function(){expect(o.toCentimetro().valor).to.be.below(8e6)}),it("79 km to mm > 75000000 milimetros",function(){expect(o.toMilimetro().valor).to.be.above(75e6)})}),describe("Desde Metro",function(){it("103 m to km = 0,103 kilometros",function(){expect(t.toKilometro().valor).to.be.equal(.103)}),it("103 m to cm < 10300 centimetros",function(){expect(t.toCentimetro().valor).to.be.below(15e3)}),it("103 m to mm > 103000 milimetros",function(){expect(t.toMilimetro().valor).to.be.above(1e5)})}),describe("Desde Pulgada",function(){it("7.2e1 p to km = 1 kilometro",function(){var e=n.toKilometro().valor.toFixed(4);e=parseFloat(e),expect(e).to.be.equal(.0018)}),it("7.2e1 p to cm < 183 centimetros",function(){expect(n.toCentimetro().valor).to.be.below(183)}),it("7.2e1 p to mm > 1828.803 milimetros",function(){expect(n.toMilimetro().valor).to.be.above(1820)})})})}),describe("Volumenes",function(){var e=new Volumen(32,"m3"),o=new Kilometro3(60),t=new Metro3(150),n=new Milimetro3(25.67);describe("Construccion",function(){it("Se crean los objetos v1, v2, v3 y v4 de tipo Volumen, Kilometro3 , Metro3 y Milimetro3, respectivamente",function(){expect(e).to.be.an["instanceof"](Volumen),expect(e).to.be.an["instanceof"](Medida),expect(o).to.be.an["instanceof"](Kilometro3),expect(o).to.be.an["instanceof"](Volumen),expect(o).to.be.an["instanceof"](Medida),expect(t).to.be.an["instanceof"](Metro3),expect(t).to.be.an["instanceof"](Volumen),expect(t).to.be.an["instanceof"](Medida),expect(n).to.be.an["instanceof"](Milimetro3),expect(n).to.be.an["instanceof"](Volumen),expect(n).to.be.an["instanceof"](Medida)}),it("El objeto v1 no responde a los metodos toMetro3, toKilometro3 y toMilimetro3",function(){expect(e).to.not.respondTo("toMetro3"),expect(e).to.not.respondTo("toKilometro3"),expect(e).to.not.respondTo("toMilimetro3")}),it("El objeto v2 responde a los metodos toMetro3, toCentimetro3 y toMilimetro3",function(){expect(o).to.respondTo("toMetro3"),expect(o).to.respondTo("toCentimetro3"),expect(o).to.respondTo("toMilimetro3")}),it("El objeto v3 responde a los metodos toKilometro3, toCentimetro3 y toMilimetro3",function(){expect(t).to.respondTo("toKilometro3"),expect(t).to.respondTo("toCentimetro3"),expect(t).to.respondTo("toMilimetro3")}),it("El objeto v4 responde a los metodos toKilometro3, toCentimetro3 y toMetro3",function(){expect(n).to.respondTo("toKilometro3"),expect(n).to.respondTo("toCentimetro3"),expect(n).to.respondTo("toMetro3")}),it("Los objetos de tipo Distancia no responden a los metodos de la clase Volumen o Distancia",function(){expect(e).to.not.respondTo("toCelsius"),expect(e).to.not.respondTo("toFarenheit"),expect(e).to.not.respondTo("toKelvin"),expect(e).to.not.respondTo("toLitro"),expect(e).to.not.respondTo("toKilometro"),expect(e).to.not.respondTo("toMetro"),expect(e).to.not.respondTo("toCentimetro"),expect(e).to.not.respondTo("toMilimetro"),expect(e).to.not.respondTo("toPulgada")})}),describe("Conversiones",function(){describe("Desde Kilometro3...",function(){it("60 km3 to m3 = 60000000000 metro3",function(){expect(o.toMetro3().valor).to.be.equal(6e10)}),it("60 km3 to cm3 < 70000000000000000 centimetro3",function(){expect(o.toCentimetro3().valor).to.be.below(7e16)}),it("60 km3 to mm3 > 55000000000000000000 milimetro3",function(){expect(o.toMilimetro3().valor).to.be.above(75e6)})}),describe("Desde Metro3",function(){it("150 m3 to km3 =  1.5e-7 Kilometro3",function(){expect(t.toKilometro3().valor).to.be.equal(1.5e-7)}),it("150 m3 to cm3 < 160000000 Centimetro3",function(){expect(t.toCentimetro3().valor).to.be.below(16e7)}),it("150 m3 to mm3 > 140000000000 Milimetro3",function(){expect(t.toMilimetro3().valor).to.be.above(14e10)})}),describe("Desde Milimetro3",function(){it("2.567e1 mm3 to km3 = 2.567e-17 Kilometro3",function(){var e=n.toKilometro3().valor;e=parseFloat(e),expect(e).to.be.equal(2.5670000000000003e-17)}),it("7.2e1 mm3 to cm3 < 1 Centimetro3",function(){expect(n.toCentimetro3().valor).to.be.below(1)}),it("7.2e1 mm3 to m3 > 7.2e-7 Metro3",function(){expect(n.toMetro3().valor).to.be.above(7.2e-9)})})})});